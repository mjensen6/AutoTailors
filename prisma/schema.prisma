generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  marketcars    MarketCar[]
}

model MarketCar {
  id            Int       @id @default(autoincrement())
  marketPrice   Int
  wholesalePrice Int
  offerPrice    Int
  make          String
  model         String
  year          String
  vin           String
  mileage       String
  transmission  String
  website       String
  available     Boolean

  users User[]

  //trimId        Int
  //trim   MMTLite @relation(fields: [trimId], references: [id], onDelete: Cascade)
  
  //userId        Int
  //user User @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model Account {
  id                Int     @id @default(autoincrement())
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @map("refresh_token")
  access_token      String? 
  expires_at        Int?    
  token_type        String? 
  scope             String?
  id_token          String?
  sessionState      String? @map("session_state")
  oauthTokenSecret  String? @map("oauth_token_secret")
  oauthToken        String? @map("oauth_token")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MMTLite {
  id        Int       @id @map("id_trim")
  make      String
  model     String
  generation      String
  yearFrom      String @map("year_from")
  yearTo     String
  series      String
  trim      String
  bodyType      String @map("body_type")

}